(self["webpackChunkapp_ambep"] = self["webpackChunkapp_ambep"] || []).push([["default-node_modules_ng-lazyload-image_fesm2020_ng-lazyload-image_mjs"],{

/***/ 27773:
/*!***********************************************************************!*\
  !*** ./node_modules/ng-lazyload-image/fesm2020/ng-lazyload-image.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Hooks": () => (/* binding */ Hooks),
/* harmony export */   "IntersectionObserverHooks": () => (/* binding */ IntersectionObserverHooks),
/* harmony export */   "LAZYLOAD_IMAGE_HOOKS": () => (/* binding */ LAZYLOAD_IMAGE_HOOKS),
/* harmony export */   "LazyLoadImageDirective": () => (/* binding */ LazyLoadImageDirective),
/* harmony export */   "LazyLoadImageModule": () => (/* binding */ LazyLoadImageModule),
/* harmony export */   "ScrollHooks": () => (/* binding */ ScrollHooks),
/* harmony export */   "SharedHooks": () => (/* binding */ SharedHooks)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 79765);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 25917);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 69165);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 88229);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 17757);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ 59193);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 45435);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 68307);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 15257);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 19773);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 88002);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 5304);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 43190);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 39761);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 74549);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 78345);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 37716);






function getNavigator() {
  return typeof window !== 'undefined' ? window.navigator : undefined;
}

function isChildOfPicture(element) {
  return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');
}

function isImageElement(element) {
  return element.nodeName.toLowerCase() === 'img';
}

function setImage(element, imagePath, useSrcset) {
  if (isImageElement(element)) {
    if (useSrcset && 'srcset' in element) {
      element.srcset = imagePath;
    } else {
      element.src = imagePath;
    }
  } else {
    element.style.backgroundImage = `url('${imagePath}')`;
  }

  return element;
}

function setSources(attrName) {
  return image => {
    const sources = image.parentElement.getElementsByTagName('source');

    for (let i = 0; i < sources.length; i++) {
      const attrValue = sources[i].getAttribute(attrName);

      if (attrValue) {
        // Check if `srcset` is supported by the current browser
        if ('srcset' in sources[i]) {
          sources[i].srcset = attrValue;
        } else {
          sources[i].src = attrValue;
        }
      }
    }
  };
}

const setSourcesToDefault = setSources('defaultImage');
const setSourcesToLazy = setSources('lazyLoad');
const setSourcesToError = setSources('errorImage');

function setImageAndSources(setSourcesFn) {
  return (element, imagePath, useSrcset) => {
    if (isImageElement(element) && isChildOfPicture(element)) {
      setSourcesFn(element);
    }

    if (imagePath) {
      setImage(element, imagePath, useSrcset);
    }
  };
}

const setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);
const setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);
const setImageAndSourcesToError = setImageAndSources(setSourcesToError);

class Hooks {
  constructor() {
    this.navigator = getNavigator();
  }

  setPlatformId(platformId) {
    this.platformId = platformId;
  }

  onDestroy(attributes) {}

  onAttributeChange(newAttributes) {}

}

const cssClassNames = {
  loaded: 'ng-lazyloaded',
  loading: 'ng-lazyloading',
  failed: 'ng-failed-lazyloaded'
};

function removeCssClassName(element, cssClassName) {
  element.className = element.className.replace(cssClassName, '');
}

function addCssClassName(element, cssClassName) {
  if (!element.className.includes(cssClassName)) {
    element.className += ` ${cssClassName}`;
  }
}

function hasCssClassName(element, cssClassName) {
  return element.className && element.className.includes(cssClassName);
}

class SharedHooks extends Hooks {
  setup(attributes) {
    setImageAndSourcesToDefault(attributes.element, attributes.defaultImagePath, attributes.useSrcset);

    if (attributes.imagePath) {
      addCssClassName(attributes.element, cssClassNames.loading);
    }

    if (hasCssClassName(attributes.element, cssClassNames.loaded)) {
      removeCssClassName(attributes.element, cssClassNames.loaded);
    }
  }

  finally(attributes) {
    addCssClassName(attributes.element, cssClassNames.loaded);
    removeCssClassName(attributes.element, cssClassNames.loading);
  }

  loadImage(attributes) {
    if (this.skipLazyLoading(attributes)) {
      // Set the image right away for bots for better SEO
      return [attributes.imagePath];
    }

    const {
      element,
      useSrcset,
      imagePath,
      decode
    } = attributes;
    let img;

    if (isImageElement(element) && isChildOfPicture(element)) {
      const parentClone = element.parentNode.cloneNode(true);
      img = parentClone.getElementsByTagName('img')[0];
      setSourcesToLazy(img);
      setImage(img, imagePath, useSrcset);
    } else {
      img = new Image();

      if (isImageElement(element) && element.referrerPolicy) {
        img.referrerPolicy = element.referrerPolicy;
      }

      if (isImageElement(element) && element.sizes) {
        img.sizes = element.sizes;
      }

      if (useSrcset && 'srcset' in img) {
        img.srcset = imagePath;
      } else {
        img.src = imagePath;
      }
    }

    if (decode && img.decode) {
      return img.decode().then(() => imagePath);
    }

    return new Promise((resolve, reject) => {
      img.onload = () => resolve(imagePath);

      img.onerror = () => reject(null);
    });
  }

  setErrorImage(error, attributes) {
    const {
      element,
      useSrcset,
      errorImagePath
    } = attributes;
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
  }

  setLoadedImage(imagePath, attributes) {
    const {
      element,
      useSrcset
    } = attributes;
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
  }

  isDisabled() {
    // Disable if SSR and the user isn't a bot
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__.isPlatformServer)(this.platformId) && !this.isBot();
  }

  skipLazyLoading(attributes) {
    return this.isBot(attributes);
  }

  isBot(attributes) {
    if (this.navigator?.userAgent) {
      return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(this.navigator.userAgent);
    }

    return false;
  }

}

class IntersectionObserverHooks extends SharedHooks {
  constructor() {
    super(...arguments);
    this.observers = new WeakMap();
    this.intersectionSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    this.uniqKey = {};
  }

  getObservable(attributes) {
    if (this.skipLazyLoading(attributes)) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({
        isIntersecting: true
      });
    }

    if (attributes.customObservable) {
      return attributes.customObservable;
    }

    const scrollContainerKey = attributes.scrollContainer || this.uniqKey;
    const options = {
      root: attributes.scrollContainer || null
    };

    if (attributes.offset) {
      options.rootMargin = `${attributes.offset}px`;
    }

    let observer = this.observers.get(scrollContainerKey);

    if (!observer) {
      observer = new IntersectionObserver(entrys => this.loadingCallback(entrys), options);
      this.observers.set(scrollContainerKey, observer);
    }

    observer.observe(attributes.element);
    return rxjs__WEBPACK_IMPORTED_MODULE_3__.Observable.create(obs => {
      const subscription = this.intersectionSubject.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(entry => entry.target === attributes.element)).subscribe(obs);
      return () => {
        subscription.unsubscribe();
        observer.unobserve(attributes.element);
      };
    });
  }

  isVisible(event) {
    return event.isIntersecting;
  }

  loadingCallback(entrys) {
    entrys.forEach(entry => this.intersectionSubject.next(entry));
  }

}

function lazyLoadImage(hooks, attributes) {
  return evntObservable => {
    return evntObservable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(data => attributes.onStateChange.emit({
      reason: 'observer-emit',
      data
    })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(event => hooks.isVisible(event, attributes)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(() => attributes.onStateChange.emit({
      reason: 'start-loading'
    })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(() => hooks.loadImage(attributes)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(() => attributes.onStateChange.emit({
      reason: 'mount-image'
    })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(imagePath => hooks.setLoadedImage(imagePath, attributes)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(() => attributes.onStateChange.emit({
      reason: 'loading-succeeded'
    })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(() => true), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.catchError)(error => {
      attributes.onStateChange.emit({
        reason: 'loading-failed',
        data: error
      });
      hooks.setErrorImage(error, attributes);
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(false);
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(() => {
      attributes.onStateChange.emit({
        reason: 'finally'
      });
      hooks.finally(attributes);
    }));
  };
}

const LAZYLOAD_IMAGE_HOOKS = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('LazyLoadImageHooks');

class LazyLoadImageDirective {
  constructor(el, ngZone, platformId, hooks) {
    this.onStateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter(); // Emits an event on every state change

    this.elementRef = el;
    this.ngZone = ngZone;
    this.propertyChanges$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__.ReplaySubject();
    this.hooks = hooks;
    this.hooks.setPlatformId(platformId);
    this.uid = Math.random().toString(36).substr(2, 9);
  }

  ngOnChanges() {
    if (this.debug === true && !this.debugSubscription) {
      this.debugSubscription = this.onStateChange.subscribe(e => console.log(e));
    }

    this.propertyChanges$.next({
      element: this.elementRef.nativeElement,
      imagePath: this.lazyImage,
      defaultImagePath: this.defaultImage,
      errorImagePath: this.errorImage,
      useSrcset: this.useSrcset,
      offset: this.offset ? this.offset | 0 : 0,
      scrollContainer: this.scrollTarget,
      customObservable: this.customObservable,
      decode: this.decode,
      onStateChange: this.onStateChange,
      id: this.uid
    });
  }

  ngAfterContentInit() {
    if (this.hooks.isDisabled()) {
      return null;
    }

    this.ngZone.runOutsideAngular(() => {
      this.loadSubscription = this.propertyChanges$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(attributes => this.hooks.onAttributeChange(attributes)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(attributes => attributes.onStateChange.emit({
        reason: 'setup'
      })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(attributes => this.hooks.setup(attributes)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.switchMap)(attributes => {
        if (!attributes.imagePath) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.never)();
        }

        return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));
      })).subscribe({
        next: () => null
      });
    });
  }

  ngOnDestroy() {
    this.propertyChanges$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1)).subscribe({
      next: attributes => this.hooks.onDestroy(attributes)
    }).unsubscribe();
    this.loadSubscription?.unsubscribe();
    this.debugSubscription?.unsubscribe();
  }

}

LazyLoadImageDirective.ɵfac = function LazyLoadImageDirective_Factory(t) {
  return new (t || LazyLoadImageDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](LAZYLOAD_IMAGE_HOOKS));
};

LazyLoadImageDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: LazyLoadImageDirective,
  selectors: [["", "lazyLoad", ""]],
  inputs: {
    lazyImage: ["lazyLoad", "lazyImage"],
    defaultImage: "defaultImage",
    errorImage: "errorImage",
    scrollTarget: "scrollTarget",
    customObservable: "customObservable",
    offset: "offset",
    useSrcset: "useSrcset",
    decode: "decode",
    debug: "debug"
  },
  outputs: {
    onStateChange: "onStateChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵNgOnChangesFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](LazyLoadImageDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: '[lazyLoad]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone
    }, {
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_10__.PLATFORM_ID]
      }]
    }, {
      type: Hooks,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [LAZYLOAD_IMAGE_HOOKS]
      }]
    }];
  }, {
    lazyImage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['lazyLoad']
    }],
    defaultImage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    errorImage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    scrollTarget: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    customObservable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    offset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    useSrcset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    decode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    debug: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    onStateChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output
    }]
  });
})();

class LazyLoadImageModule {}

LazyLoadImageModule.ɵfac = function LazyLoadImageModule_Factory(t) {
  return new (t || LazyLoadImageModule)();
};

LazyLoadImageModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: LazyLoadImageModule,
  declarations: [LazyLoadImageDirective],
  exports: [LazyLoadImageDirective]
});
LazyLoadImageModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [{
    provide: LAZYLOAD_IMAGE_HOOKS,
    useClass: IntersectionObserverHooks
  }]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](LazyLoadImageModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgModule,
    args: [{
      declarations: [LazyLoadImageDirective],
      exports: [LazyLoadImageDirective],
      providers: [{
        provide: LAZYLOAD_IMAGE_HOOKS,
        useClass: IntersectionObserverHooks
      }]
    }]
  }], null, null);
})();

class Rect {
  constructor(left, top, right, bottom) {
    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
  }

  static fromElement(element) {
    const {
      left,
      top,
      right,
      bottom
    } = element.getBoundingClientRect();

    if (left === 0 && top === 0 && right === 0 && bottom === 0) {
      return Rect.empty;
    } else {
      return new Rect(left, top, right, bottom);
    }
  }

  static fromWindow(_window) {
    return new Rect(0, 0, _window.innerWidth, _window.innerHeight);
  }

  inflate(inflateBy) {
    this.left -= inflateBy;
    this.top -= inflateBy;
    this.right += inflateBy;
    this.bottom += inflateBy;
  }

  intersectsWith(rect) {
    return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;
  }

  getIntersectionWith(rect) {
    const left = Math.max(this.left, rect.left);
    const top = Math.max(this.top, rect.top);
    const right = Math.min(this.right, rect.right);
    const bottom = Math.min(this.bottom, rect.bottom);

    if (right >= left && bottom >= top) {
      return new Rect(left, top, right, bottom);
    } else {
      return Rect.empty;
    }
  }

}

Rect.empty = new Rect(0, 0, 0, 0);

class ScrollHooks extends SharedHooks {
  constructor() {
    super(...arguments);

    this.getWindow = () => window;

    this.scrollListeners = new WeakMap(); // Only create one scroll listener per target and share the observable.
    // Typical, there will only be one observable per application

    this.getScrollListener = scrollTarget => {
      if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.empty)();
      }

      const scrollListener = this.scrollListeners.get(scrollTarget);

      if (scrollListener) {
        return scrollListener;
      }

      const srollEvent = rxjs__WEBPACK_IMPORTED_MODULE_3__.Observable.create(observer => {
        const eventName = 'scroll';

        const handler = event => observer.next(event);

        const options = {
          passive: true,
          capture: false
        };
        scrollTarget.addEventListener(eventName, handler, options);
        return () => scrollTarget.removeEventListener(eventName, handler, options);
      });
      const listener = this.sampleObservable(srollEvent);
      this.scrollListeners.set(scrollTarget, listener);
      return listener;
    };
  }

  getObservable(attributes) {
    if (this.skipLazyLoading(attributes)) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)('load');
    } else if (attributes.customObservable) {
      return attributes.customObservable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)(''));
    } else if (attributes.scrollContainer) {
      return this.getScrollListener(attributes.scrollContainer);
    }

    return this.getScrollListener(this.getWindow());
  }

  isVisible(event, attributes) {
    const elementBounds = Rect.fromElement(attributes.element);

    if (elementBounds === Rect.empty) {
      return false;
    }

    const windowBounds = Rect.fromWindow(this.getWindow());
    elementBounds.inflate(attributes.offset);

    if (attributes.scrollContainer) {
      const scrollContainerBounds = Rect.fromElement(attributes.scrollContainer);
      const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);
      return elementBounds.intersectsWith(intersection);
    } else {
      return elementBounds.intersectsWith(windowBounds);
    }
  }

  sampleObservable(obs, scheduler) {
    return obs.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.sampleTime)(100, scheduler), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.share)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)(''));
  }

}
/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=ng-lazyload-image.mjs.map

/***/ })

}]);
//# sourceMappingURL=default-node_modules_ng-lazyload-image_fesm2020_ng-lazyload-image_mjs.js.map